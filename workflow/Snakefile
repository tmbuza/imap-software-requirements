from snakemake.utils import min_version

min_version("6.10.0")

# Configuration file containing all user-specified settings
configfile: "config/config.yaml"

mothurSamples = list(set(glob_wildcards(os.path.join('data/mothur/reads/', '{sample}_{readNum, R[12]}_001.fastq.gz')).sample))

sraSamples = list(set(glob_wildcards(os.path.join('data/reads/', '{sample}_{sraNum, [12]}.fastq.gz')).sample))


import os
import csv
import pandas as pd

METADATA=pd.read_csv('data/metadata/SraRunTable_bushmeat.csv').loc[0:1]
ACCESSIONS=METADATA['Run'].tolist() # Specify the column containing the accession, in this demo is Run
OUTDIR="data/reads" 
if not os.path.exists(OUTDIR):
   os.makedirs(OUTDIR)

TESTDIR="data/reads/test"

# Master rule for controlling workflow.
rule all:
    input:
        "index.html",
        "data/metadata/sra_accessions.txt",
        # "images/project_tree.txt",
        # "data/metadata/bushmeat.csv",
        # "data/metadata/ibd.csv",
        # "results/read_size_asce.csv",
        # "results/read_size_desc.csv",
        # "images/variable_freq.png",
        # "images/bush_variable_freq.svg",
        # "images/ibd_variable_freq.svg",
        # "images/sample_gps.png",
        # "images/smkreport/screenshot.png",  
        expand("{outdir}/{accession}_1.fastq", outdir=OUTDIR, accession=ACCESSIONS),
        expand("{outdir}/{accession}_2.fastq", outdir=OUTDIR, accession=ACCESSIONS),
        expand("{testdir}/{accession}_1_sub.fastq", testdir=TESTDIR, accession=ACCESSIONS),
        expand("{testdir}/{accession}_2_sub.fastq", testdir=TESTDIR, accession=ACCESSIONS),
        "data/metadata/mothur_mapping_file.tsv",
        "data/metadata/mothur_design_file.tsv",
        "data/mothur/references/silva.v4.align",
        "data/mothur/references/trainset16_022016.pds.fasta",
        "data/mothur/references/trainset16_022016.pds.tax",
        "data/mothur/references/zymo.mock.16S.v4.fasta",


# Download metadata
rule download_sra_metadata:
    output:
        srametadata="data/metadata/SraRunTable.csv",
    shell:
        """
        echo Download a project metadata by clicking the metadata tab and specify output file as SraRunTable.csv.
        """

# Get tidy metadata
rule process_sra_metadata:
    input:
        sra_acc=rules.download_sra_metadata.output
    output:
        tidymetadata="data/metadata/metadata.csv",
    script:
        "scripts/process_sra_metadata.R"
        

# Get variable barplot
rule ggplot_variable_freq:
    input:
        rules.process_sra_metadata.output
    output:
        png="images/variable_freq.png",
        svg="images/variable_freq.svg"
    script:
        "scripts/plot_var_freq.R"


# Get read size
rule R_dplyr_read_size:
    input:
        rules.process_sra_metadata.output
    output:
        asce="results/read_size_asce.csv",
        desc="results/read_size_desc.csv"
    script:
        "scripts/explore_read_size.R"
      

# Get sample location 
rule leaflet_sample_location:
    input:
        rules.process_sra_metadata.output
    output:
        map="images/sample_gps.png"
    script:
        "scripts/get_sample_gps.R"



# Get rule graphs
rule dot_rulegraph:
    output:
        "dags/rulegraph.svg",
    shell:
        """
        bash workflow/scripts/rules_dag.sh
        """

# Get smk html report
rule snakemake_html_report:
    shell:
        """
        bash workflow/scripts/smk_html_report.sh
        """

# Get SRA accessions, the first column of metadata
rule get_sra_accessions:
    input:
        sra_acc=rules.download_sra_metadata.output
    output:
        sra_acc="data/metadata/sra_accessions.txt",
    script:
        "scripts/get_sra_accessions.py"


# Dowload the SRA RUN reads
rule download_sra_reads: 
    input:
        rules.get_sra_accessions.output.sra_acc
    output:
        "{outdir}/{accession}_1.fastq",
        "{outdir}/{accession}_2.fastq"
    params:
        download_folder=OUTDIR,
    threads: 1
    shell:
        """
        fasterq-dump {wildcards.accession} -O {params.download_folder} --threads {threads}
        """

# Subset a test data
rule seqkit_test_subset:
    input:
        expand("{outdir}/{accession}_1.fastq", outdir=OUTDIR, accession=ACCESSIONS),
        expand("{outdir}/{accession}_2.fastq", outdir=OUTDIR, accession=ACCESSIONS),
    output:
        "{testdir}/{accession}_1_sub.fastq",
        "{testdir}/{accession}_2_sub.fastq",
    threads: 1
    shell:
        """
        bash workflow/scripts/resize_test_subset.sh
        """


rule seqkit_simple_stats:
    input:
        script="workflow/scripts/seqkit_stat_1.sh",
        rawreads=expand("{outdir}/{accession}_{sraNum}.fastq", outdir=OUTDIR, accession=ACCESSIONS, sraNum=config["sraNum"]),
    output:
        seqkit1="results/stats1/seqkit_stats.txt",
    threads: 1
    shell:
      "bash {input.script}"


rule mothur_mapping_file:
    input:
        stats1="results/stats1/seqkit_stats.txt"
    output:
        files="data/metadata/mothur_mapping_file.tsv",
    threads: 1
    script:
      "scripts/mothur_mapping_file.R"


rule mothur_design_file:
    input:
        files="data/metadata/mothur_mapping_file.tsv",
    output:
        files="data/metadata/mothur_design_file.tsv",
    threads: 1
    script:
      "scripts/mothur_design_file.R"

# Downloading and formatting SILVA and RDP reference databases. The v4 region is extracted from 
# SILVA database for use as reference alignment.
rule mothur_references:
	input:
		script="workflow/scripts/mothurReferences.sh"
	output:
		silvaV4="data/mothur/references/silva.v4.align",
		rdpFasta="data/mothur/references/trainset16_022016.pds.fasta",
		rdpTax="data/mothur/references/trainset16_022016.pds.tax"
	conda:
		"envs/mothur.yaml"
	shell:
		"bash {input.script}"


# Downloading the Zymo mock sequence files and extracting v4 region for error estimation.
rule mothur_zymo_mock:
	input:
		script="workflow/scripts/mothurMock.sh",
		silvaV4="data/mothur/references/silva.v4.align",
	output:
		mockV4="data/mothur/references/zymo.mock.16S.v4.fasta"
	conda:
		"envs/mothur.yaml"
	shell:
		"bash {input.script}"


# Get directory tree
rule project_tree:
    output:
        tree="images/project_tree.txt"
    shell:
        """
        bash workflow/scripts/tree.sh
        """

rule github_summary_website:
    input:
        script="workflow/scripts/render.R",
        rmd="index.Rmd",
        rulegraph="dags/rulegraph.svg",
        dag="images/variable_freq.svg",
        map="images/sample_gps.png",
        html2png="images/smkreport/screenshot.png",
        tree="images/project_tree.txt",
        asce="results/read_size_asce.csv",
        desc="results/read_size_desc.csv",
        mapfiles="data/metadata/mothur_mapping_file.tsv",
        design="data/metadata/mothur_design_file.tsv"
    output:
        doc="index.html",
    shell:
        """
        R -e "library(rmarkdown); render('{input.rmd}')"
        """
